<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-17T15:46:41+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zephyrl</title><subtitle>Welcome to Zephyrl's Workshop!</subtitle><entry><title type="html">Ongoing project collection</title><link href="http://localhost:4000/Ongoing-projects/" rel="alternate" type="text/html" title="Ongoing project collection" /><published>2019-08-09T00:00:00+02:00</published><updated>2019-08-09T00:00:00+02:00</updated><id>http://localhost:4000/Ongoing-projects</id><content type="html" xml:base="http://localhost:4000/Ongoing-projects/">&lt;p&gt;Here you see some ongoing projects, which I’m currently working on, and each of them is also going to be posted in this blog as articles soon.&lt;/p&gt;

&lt;p&gt;If you would like to know more about these projects, also feel free to &lt;a href=&quot;mailto:zhy@kth.se&quot;&gt;[contact me]&lt;/a&gt; and ask about more.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-line-placement-for-continuous-exploration&quot;&gt;Dynamic Line Placement for Continuous exploration&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Tags: C++, Visualization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ongoing/dlp.png&quot; alt=&quot;dlp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This project is supervised by Dr. Tobias Guenther and Irene Baeza Rojo.&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
&lt;p&gt;Scientific visualization became a vital ingredient in many scientific disciplines. Prominent examples are medical data, meteorology and engineering problems. Due to the ever-growing computational power, numerical simulations become larger and therefore more complex. In the analysis of three-dimensional flow data, we often experience occlusion problems, when
irrelevant parts of the scene occlude the important aspects (aneurysm, tumor, etc.). This is especially severe in dense fluid flows, where streamlines are placed to represent the invisible fluid. Current visibility optimization methods select streamline geometry from a pre-computed set of candidates, which is not extended when the user moves closer to the data. In this project, we dynamically create representative geometry and automatically adjust their transparency based on a given importance measure.&lt;/p&gt;

&lt;h3 id=&quot;tasks&quot;&gt;Tasks&lt;/h3&gt;
&lt;p&gt;We begin with an asynchronous CPU implementation of the Jobard-Lefer algorithm in 3D, which results in evenly-spaced line geometry that is subdivided into segments. Given a scalar importance measure, we sample the importance onto the lines and visualize the geometry in a provided opacity optimization framework. We aim for the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adaptive line density which is controlled by a view-dependent scalar field&lt;/li&gt;
  &lt;li&gt;Smooth and frame coherent transitions of opacity during camera movement&lt;/li&gt;
  &lt;li&gt;Real-time performance during interactive navigation&lt;/li&gt;
  &lt;li&gt;A user-interface that allows users to select importance measures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The computation of streamlines with adaptive density requires a number of acceleration data structures. For instance, efficient neighborhood queries are implemented with kd-trees, and in order to continue or terminate line integration at view frustum boundaries lines have an active front and end. One of the following directions can be explored deeper:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;To speed up the integration, the line discretization or integration step size can be adjusted for objects farther away from the camera.&lt;/li&gt;
  &lt;li&gt;To reduce the memory IO cost during sampling, a level-of-detail pyramid of the vector field can be computed to trace lines with less accuracy far away from the camera.&lt;/li&gt;
  &lt;li&gt;A user interface can allow users to place regions of interest, paint the importance on lines or advect importance from seed sources.
A general challenge for all the above methods is a temporally-coherent transition between levels of details, variations in the integration accuracy or changes in the importance. The algorithm is tested in numerical fluid simulations in small and large domains.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;assisting-surgery-with-mixed-reality-devices&quot;&gt;Assisting Surgery with Mixed Reality Devices&lt;/h2&gt;

&lt;p&gt;The goal of the project is to assist surgeons during complex fracture surgeries by showing scanned data of patients, as well as 3D models of bone fragments. With the help of HoloLens 2 surgeons will be able to use mixed reality during surgeries of complex fractures.&lt;/p&gt;

&lt;p&gt;In critical cases bones can be fractured into many separate pieces that need to be realigned and fixed with supportive structure. The position and orientation of bone structures is usually not well visible during the surgery and surgeons have to remember their position from the scan inspection prior to the surgery.&lt;/p&gt;

&lt;p&gt;The major task is hence to allow surgeons to reinspect the scan data during the surgery and better understand individual bone positions as needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ongoing/mr.png&quot; alt=&quot;mr&quot; /&gt;
Here is a &lt;a href=&quot;https://drive.google.com/file/d/1srVZiZuzCjAKpWUOb9-4-FSnOf7tGykd/view?usp=sharing&quot;&gt;[Link]&lt;/a&gt; to the video as a demo for current functions.&lt;/p&gt;</content><author><name></name></author><category term="Ongoing projects" /><summary type="html">Here you see some ongoing projects, which I’m currently working on, and each of them is also going to be posted in this blog as articles soon. If you would like to know more about these projects, also feel free to [contact me] and ask about more. Dynamic Line Placement for Continuous exploration Tags: C++, Visualization This project is supervised by Dr. Tobias Guenther and Irene Baeza Rojo. Description Scientific visualization became a vital ingredient in many scientific disciplines. Prominent examples are medical data, meteorology and engineering problems. Due to the ever-growing computational power, numerical simulations become larger and therefore more complex. In the analysis of three-dimensional flow data, we often experience occlusion problems, when irrelevant parts of the scene occlude the important aspects (aneurysm, tumor, etc.). This is especially severe in dense fluid flows, where streamlines are placed to represent the invisible fluid. Current visibility optimization methods select streamline geometry from a pre-computed set of candidates, which is not extended when the user moves closer to the data. In this project, we dynamically create representative geometry and automatically adjust their transparency based on a given importance measure. Tasks We begin with an asynchronous CPU implementation of the Jobard-Lefer algorithm in 3D, which results in evenly-spaced line geometry that is subdivided into segments. Given a scalar importance measure, we sample the importance onto the lines and visualize the geometry in a provided opacity optimization framework. We aim for the following properties: Adaptive line density which is controlled by a view-dependent scalar field Smooth and frame coherent transitions of opacity during camera movement Real-time performance during interactive navigation A user-interface that allows users to select importance measures The computation of streamlines with adaptive density requires a number of acceleration data structures. For instance, efficient neighborhood queries are implemented with kd-trees, and in order to continue or terminate line integration at view frustum boundaries lines have an active front and end. One of the following directions can be explored deeper: To speed up the integration, the line discretization or integration step size can be adjusted for objects farther away from the camera. To reduce the memory IO cost during sampling, a level-of-detail pyramid of the vector field can be computed to trace lines with less accuracy far away from the camera. A user interface can allow users to place regions of interest, paint the importance on lines or advect importance from seed sources. A general challenge for all the above methods is a temporally-coherent transition between levels of details, variations in the integration accuracy or changes in the importance. The algorithm is tested in numerical fluid simulations in small and large domains. Assisting Surgery with Mixed Reality Devices The goal of the project is to assist surgeons during complex fracture surgeries by showing scanned data of patients, as well as 3D models of bone fragments. With the help of HoloLens 2 surgeons will be able to use mixed reality during surgeries of complex fractures. In critical cases bones can be fractured into many separate pieces that need to be realigned and fixed with supportive structure. The position and orientation of bone structures is usually not well visible during the surgery and surgeons have to remember their position from the scan inspection prior to the surgery. The major task is hence to allow surgeons to reinspect the scan data during the surgery and better understand individual bone positions as needed. Here is a [Link] to the video as a demo for current functions.</summary></entry><entry><title type="html">DFAO and Soft Shadows based on SDF - A Unity Production</title><link href="http://localhost:4000/SDF-Unity/" rel="alternate" type="text/html" title="DFAO and Soft Shadows based on SDF - A Unity Production" /><published>2019-08-09T00:00:00+02:00</published><updated>2019-08-09T00:00:00+02:00</updated><id>http://localhost:4000/SDF-Unity</id><content type="html" xml:base="http://localhost:4000/SDF-Unity/">&lt;p&gt;&lt;img src=&quot;/images/sdfu/screenshot.png&quot; alt=&quot;screenshot preview&quot; /&gt;
&lt;a href=&quot;https://github.com/ZephyrL/DFAO-unity&quot;&gt;[Link to this project]&lt;/a&gt;  on Github.&lt;/p&gt;

&lt;p&gt;This project is using an offline SDF baker (SDFr), and maintaining global distance field at runtime.
Current shadowing functions run at about 120 fps, while I guess it would be more suitable for generally static scenes, which means that you’d better to use it for things that seldom change or move, to avoid efficiency problems.&lt;/p&gt;

&lt;p&gt;There are some slides with videos to illustrate the project better (in the Github repository), originally it was not written in English and was converted by google translate, please check it you’d like to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please notice&lt;/strong&gt; that within this article, I used some screenshots from my &lt;a href=&quot;https://github.com/ZephyrL/DFAO-unity/blob/master/presentation-translated.pptx&quot;&gt;slides&lt;/a&gt;, because my website is not ready to display formulars, I hope this doesn’t bother you much.&lt;/p&gt;

&lt;h2 id=&quot;whats-it-about&quot;&gt;What’s it about?&lt;/h2&gt;

&lt;p&gt;The work of this project is originally completed through an internship at NetEase Inc., it includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Research on the use of S DistanceField Field&lt;/li&gt;
  &lt;li&gt;Unity implementation: Offline baking of local SDF smodels&lt;/li&gt;
  &lt;li&gt;Unity implementation: Global SDF for real-time maintenance, global Distance Field&lt;/li&gt;
  &lt;li&gt;Unity implementation: GDF-based real-time soft shadows and ambient occlusion rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-a-signed-distance-field-sdf&quot;&gt;What is a signed distance field (SDF)?&lt;/h2&gt;

&lt;p&gt;Distance field is a form of mapping in 2D/3D space: from any point &lt;em&gt;p&lt;/em&gt;,  mapping to the distance &lt;em&gt;d&lt;/em&gt; to the nearest boundary (2D) or plane (3D) in the space.&lt;/p&gt;

&lt;p&gt;Distance fields have many categories, SDF is one of them, which is characterized by distinguishing the inner and outer properties of the grid, with a positive distance outside the grid and a negative one inside.&lt;/p&gt;

&lt;p&gt;SDF’s application in 2D space is mainly font rendering, proposed by Valve in 2006.&lt;/p&gt;

&lt;p&gt;Applications of SDF in 3D space include collision detection, model representation and deformation, ambient occlusion, soft shadowing, etc.&lt;/p&gt;

&lt;h2 id=&quot;content-of-this-project&quot;&gt;Content of this project&lt;/h2&gt;

&lt;h3 id=&quot;sdfbaker&quot;&gt;SDFBaker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/sdfbaker.png&quot; alt=&quot;sdfbaker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SDFBaker.cs a monobehavior script that can be attached on objects with mesh or children containing mesh&lt;/p&gt;

&lt;p&gt;SDFBaker bakes out SDF data for the collection of all mesh under this object, ant it is offline, and the baking results are written to disk for reuse and instantiation of object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/bakerclass.png&quot; alt=&quot;class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The class diagram of SDFBaker is shown above, the basic interfaces are already provided, and SDF baker is just one implementation of possible baker on this framework. You could even use it to implement bakers for something else.&lt;/p&gt;

&lt;h3 id=&quot;global-distance-field&quot;&gt;Global Distance Field&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/gdfupdate.png&quot; alt=&quot;gdf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The implementation of runtime Global Distance Field (GDF) is in &lt;code class=&quot;highlighter-rouge&quot;&gt;DistanceFieldAtlas.cs&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At the beginning of execution, detect all objects in the scene that include SDF components, cache their SDF instances, and weight them according to the SDF file name used;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The equal width (actually the exact same dimension) SDF Texture is injected into a separate Texture3D and passed to the GPU end. If there are 3 x 64^3 SDFs in the scene, the texture size is 64x64x192. This operation only needs to be performed once.
GDF is a low-resolution Custom Render Texture size of 64^3 or 128^3&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maintain spatial transformation information for all objects with SDF, detect the activation of objects per frame (GameObject.activeSelf) and whether the transformation occurs (Transform.isChange), and, if so, trigger update events&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The GDF update is done within a Shader, and updating the GDF requires the transfer of the StructuredBuffer &amp;lt;VolumeData&amp;gt;, i.e. spatial transformation and AABB information for all objects in the scene, as well as a number of parameters.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;update-of-gdf&quot;&gt;Update of GDF&lt;/h4&gt;

&lt;p&gt;GDFUpdate.shader:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For each fragment, get its uv coordinates and transform to the world coordinates of the GDF carnouspresses it represents (replace with p below)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Define the VolumeData structure at the shader end in GDFTexturing.hlsl:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/gdfshader.png&quot; alt=&quot;gdfshader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The pseudo-code to update the GDF texture:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructuredBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolumeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsideAABB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SampleAtlas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textureAtlas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextureIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalAABBPlus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textureAtlas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextureIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;illustration-for-distance-calculation&quot;&gt;Illustration for distance calculation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/confid.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, distances got from this method is not accurate, and if you know how ray-marching works, you would realize that sometimes a ray would jump over a surface if your are not using a confidentially small step size. To fix this problem, I introduced a method to get a rather confident value for the step of ray-marching:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/confid-1.png&quot; alt=&quot;img&quot; /&gt;
&lt;img src=&quot;/images/sdfu/confid-2.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;images-and-videos-of-the-results&quot;&gt;Images and Videos of the results&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdfu/screenshot.png&quot; alt=&quot;screenshot preview&quot; /&gt;
&lt;img src=&quot;/images/sdfu/screenshot2.png&quot; alt=&quot;screenshot&quot; /&gt;
&lt;img src=&quot;/images/sdfu/res-1.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The videos are, againly, stored in the &lt;a href=&quot;https://github.com/ZephyrL/DFAO-unity/blob/master/presentation-translated.pptx&quot;&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;2019-08-09&lt;/p&gt;</content><author><name></name></author><category term="C#" /><category term="Computer Graphics" /><category term="Unity" /><category term="SDF" /><category term="shadowing" /><summary type="html">[Link to this project] on Github. This project is using an offline SDF baker (SDFr), and maintaining global distance field at runtime. Current shadowing functions run at about 120 fps, while I guess it would be more suitable for generally static scenes, which means that you’d better to use it for things that seldom change or move, to avoid efficiency problems. There are some slides with videos to illustrate the project better (in the Github repository), originally it was not written in English and was converted by google translate, please check it you’d like to. Please notice that within this article, I used some screenshots from my slides, because my website is not ready to display formulars, I hope this doesn’t bother you much. What’s it about? The work of this project is originally completed through an internship at NetEase Inc., it includes: Research on the use of S DistanceField Field Unity implementation: Offline baking of local SDF smodels Unity implementation: Global SDF for real-time maintenance, global Distance Field Unity implementation: GDF-based real-time soft shadows and ambient occlusion rendering What is a signed distance field (SDF)? Distance field is a form of mapping in 2D/3D space: from any point p, mapping to the distance d to the nearest boundary (2D) or plane (3D) in the space. Distance fields have many categories, SDF is one of them, which is characterized by distinguishing the inner and outer properties of the grid, with a positive distance outside the grid and a negative one inside. SDF’s application in 2D space is mainly font rendering, proposed by Valve in 2006. Applications of SDF in 3D space include collision detection, model representation and deformation, ambient occlusion, soft shadowing, etc. Content of this project SDFBaker SDFBaker.cs a monobehavior script that can be attached on objects with mesh or children containing mesh SDFBaker bakes out SDF data for the collection of all mesh under this object, ant it is offline, and the baking results are written to disk for reuse and instantiation of object. The class diagram of SDFBaker is shown above, the basic interfaces are already provided, and SDF baker is just one implementation of possible baker on this framework. You could even use it to implement bakers for something else. Global Distance Field The implementation of runtime Global Distance Field (GDF) is in DistanceFieldAtlas.cs： At the beginning of execution, detect all objects in the scene that include SDF components, cache their SDF instances, and weight them according to the SDF file name used; The equal width (actually the exact same dimension) SDF Texture is injected into a separate Texture3D and passed to the GPU end. If there are 3 x 64^3 SDFs in the scene, the texture size is 64x64x192. This operation only needs to be performed once. GDF is a low-resolution Custom Render Texture size of 64^3 or 128^3 Maintain spatial transformation information for all objects with SDF, detect the activation of objects per frame (GameObject.activeSelf) and whether the transformation occurs (Transform.isChange), and, if so, trigger update events The GDF update is done within a Shader, and updating the GDF requires the transfer of the StructuredBuffer &amp;lt;VolumeData&amp;gt;, i.e. spatial transformation and AABB information for all objects in the scene, as well as a number of parameters. Update of GDF GDFUpdate.shader: For each fragment, get its uv coordinates and transform to the world coordinates of the GDF carnouspresses it represents (replace with p below) Define the VolumeData structure at the shader end in GDFTexturing.hlsl: The pseudo-code to update the GDF texture: for (vd in StructuredBuffer&amp;lt;VolumeData&amp;gt;) : if ( InsideAABB(p, vd) ): dist = SampleAtlas(textureAtlas, vd.TextureIndex, p) else: dist, dist2* = GlobalAABBPlus(textureAtlas, vd.TextureIndex, p) minDist = min(dist, minDist) Illustration for distance calculation However, distances got from this method is not accurate, and if you know how ray-marching works, you would realize that sometimes a ray would jump over a surface if your are not using a confidentially small step size. To fix this problem, I introduced a method to get a rather confident value for the step of ray-marching: Images and Videos of the results The videos are, againly, stored in the slides. Thanks for reading. 2019-08-09</summary></entry><entry><title type="html">Signed Distance Field and Applications</title><link href="http://localhost:4000/SDF/" rel="alternate" type="text/html" title="Signed Distance Field and Applications" /><published>2019-07-05T00:00:00+02:00</published><updated>2019-07-05T00:00:00+02:00</updated><id>http://localhost:4000/SDF</id><content type="html" xml:base="http://localhost:4000/SDF/">&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-07-02 10_39_05.bmp&quot; alt=&quot;2019-07-02 10_39_05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ZephyrL/DH2323Project&quot;&gt;[Link to this project]&lt;/a&gt; on Github&lt;/p&gt;

&lt;p&gt;This project works as the outcome of Course DH2323 at KTH, Computer Graphics and Interaction. The project is a C++ implementation of &lt;strong&gt;Ray-marched ambient occlusion&lt;/strong&gt; rendered with &lt;strong&gt;Signed Distance Field&lt;/strong&gt;. This article is basically a copy of the readme text of this project at its repository.&lt;/p&gt;

&lt;h2 id=&quot;0-logs&quot;&gt;0. Logs&lt;/h2&gt;

&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Common mesh loading with &lt;em&gt;ASSIMP&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Ray Marching with SDF&lt;/li&gt;
  &lt;li&gt;SDF calculation of various constructive geometries&lt;/li&gt;
  &lt;li&gt;SDF generation for arbitrary mesh (e.g. bunny.ply)&lt;/li&gt;
  &lt;li&gt;Store and Load SDF texture data&lt;/li&gt;
  &lt;li&gt;Scene combined with mesh and constructive geometries&lt;/li&gt;
  &lt;li&gt;Shading, with soft shadows, ambient occlusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;to-dos&quot;&gt;To-Do’s&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Camera: &lt;del&gt;keyboard&lt;/del&gt; and mouse control&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;SDF: per-mesh SDF generation in preprocessing&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;SDF: texture caching and storing (compressing?)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Landscape: represent global height field, and combine with SDF&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Shader: shading function, coloring, ambient occlusion&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;File System: mesh name, I/O method, SDF importing (avoid to generate the same SDF each run, time consuming!)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Mesh &amp;amp; SDF: mesh instancing, apply mesh transformations to SDF query&lt;/li&gt;
  &lt;li&gt;SDF generation multi-tasking&lt;/li&gt;
  &lt;li&gt;GPU: transport the project to GPU&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-environment--requirements&quot;&gt;I. Environment / Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Platform: Ubuntu 16.04 LTS&lt;/li&gt;
  &lt;li&gt;Processer: Intel Core i7-8700&lt;/li&gt;
  &lt;li&gt;Compiler: gcc(g++) 5.4.0 (should be fine with any recent versions)&lt;/li&gt;
  &lt;li&gt;Programming language: C++&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tools-and-third-party-libraries&quot;&gt;Tools and Third-party libraries&lt;/h4&gt;

&lt;p&gt;cmake:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install cmake&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SDL:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install libsdl-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ASSIMP:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install libassimp-dev libassimp-tuils&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;ii-how-tos&quot;&gt;II. How-to’s&lt;/h2&gt;

&lt;h4 id=&quot;how-to-run&quot;&gt;How to run?&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd //path/to/Project/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Generate the project and run :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake CMakeList.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./Run&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In case you cannot generate the project with CMake, check if there exist &lt;strong&gt;CMakeCache.txt&lt;/strong&gt; cache file in the folder, please remove it first:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo rm CMakeCache.txt&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-to-make-full-use&quot;&gt;How to make full use?&lt;/h4&gt;

&lt;p&gt;If you have the interest to read the codes or make modifications, please feel free and go ahead. And here are some tips before you start.&lt;/p&gt;

&lt;p&gt;For convenience, I define a file called &lt;strong&gt;debug.h&lt;/strong&gt; in the &lt;strong&gt;Project/src/&lt;/strong&gt; folder, enclose you can find 4 macros&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define DEBUG
#define TIMING
#define SCREENSHOT
#define PREZ
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;these are switches that control the functions of the program.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DEBUG: output some useful information of current run in the console.&lt;/li&gt;
  &lt;li&gt;TIMING: output frame render time in the console.&lt;/li&gt;
  &lt;li&gt;SCREENSHOT: save the last frame before close into &lt;strong&gt;Project//images/sdf/&lt;/strong&gt; as a .bmp file&lt;/li&gt;
  &lt;li&gt;PREZ: render additional geometries in the scene when TRUE, otherwise only render the bunny.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another file called “parameters.h” in the same folder, include all the parameters that use to control the scene, distance field, camera and light. Things are commented, and you could have a try to change some of them then check the outcome.&lt;/p&gt;

&lt;p&gt;Don’t forget to recompile every time you modify any file, simply enter &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; in the console.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Signed Distance Field&lt;/strong&gt; (SDF) is a variation of distance field, which in a 3D(2D) space maps a &lt;em&gt;position&lt;/em&gt; to its distance to the &lt;em&gt;nearest&lt;/em&gt; plane (edge). Distance field has been applied in many studies, such as image processing, physics, and computer graphics. In the context of computer graphics, distance fields are usually signed, aka. signed distance field, to indicate whether certain position is inside a mesh or not.&lt;/p&gt;

&lt;p&gt;In computer graphics and game development, SDF shows great versatility, it can be used for collision test, mesh representation, ray tracing, etc. Besides, people find that it comes along with some bonus when the scene is rendered with ray-tracing (namely, ray-marching) algorithms – shadow effects like &lt;strong&gt;soft shadows&lt;/strong&gt; and &lt;strong&gt;ambient occlusion&lt;/strong&gt; can be produced with almost no extra cost.&lt;/p&gt;

&lt;p&gt;This project is about a start-from-scratch C++ implementation of a &lt;strong&gt;real-time ray marching renderer&lt;/strong&gt;, which includes a baking tool of SDF texture and produces soft shadow effects. During the implementation we make use of some existing tools: ASSIMP for mesh importing and  for screen presentation. All references will be listed at the end of this document.&lt;/p&gt;

&lt;h2 id=&quot;2-cornerstones&quot;&gt;2. Cornerstones&lt;/h2&gt;

&lt;h4 id=&quot;21-camera-and-screen-set-up&quot;&gt;2.1 Camera and screen set-up&lt;/h4&gt;

&lt;p&gt;The camera working for ray tracing is different from ones working for conventional pipeline; Instead of converting everything to the camera’s view space, ray tracing camera shots rays into the scene, so that the rays should be transformed from screen space to world space.&lt;/p&gt;

&lt;p&gt;As the final deliverable was expected to be a navigator where you can check the objects from any direction, we preserve the idea to rotate the camera  around the origin, and define the &lt;code class=&quot;highlighter-rouge&quot;&gt;Camera&lt;/code&gt; class in a LookAt() style. Besides, it contains necessary members such as screen configurations and view frustum to generate rays correctly. The definition of the class is shown in the snippet below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Code-camera.png&quot; alt=&quot;Code-camera&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CameraController&lt;/code&gt; is the class to move the camera around, it is implemented with keyboard listeners; while it could be more complete by adding mouse listeners, which is not yet implemented.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Code-cameracontrol.png&quot; alt=&quot;Code-cameracontrol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To set pixels according to a frame rendered we furthermore introduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;Screen&lt;/code&gt; class, which is a common pack-up of the SDL functions, since they’re provided in the labs, we won’t talk much about it.&lt;/p&gt;

&lt;h4 id=&quot;22-scene-model-and-mesh-loading&quot;&gt;2.2 Scene, model and mesh loading&lt;/h4&gt;

&lt;p&gt;We use ASSIMP to help load various format of mesh files, and define a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mesh&lt;/code&gt; class to as the basic integrated unit of scene representation. The scratch of this class refer to the mesh class provided by https://learnopengl.com/, while in practice the codes are highly adapt to the use of this project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Code-mesh.png&quot; alt=&quot;Code-mesh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The buffer handle used for OpenGL is removed, we keep the mesh and include bounding box, transform and distance field data of the mesh. Additionally, we give name to meshes, in order to enable saving/loading distance field data afterwards.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mesh&lt;/code&gt; is contained within a &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;, and models are contained by &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt;, we keep this level structure to make sure the codes are prepared for extension, since at present we only use a bunny mesh in this project.&lt;/p&gt;

&lt;h2 id=&quot;3-core-functions&quot;&gt;3. Core Functions&lt;/h2&gt;

&lt;h4 id=&quot;31-sdf-generation&quot;&gt;3.1 SDF generation&lt;/h4&gt;

&lt;p&gt;When a mesh is constructing, the program would automatically create the distance field data for it. If you have read about distance field, you may know something called &lt;a href=&quot;http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm&quot;&gt;analytical distance functions&lt;/a&gt;, which calculate the exact distance from any position to certain geometry shapes, like a box or a cylinder. However, the distance field of arbitrary mesh is not as simple as those geometries, and approaches which decompose meshes into constructive geometries seem not practical. In this project, the solution is sampling, which is to do brute-force ray tracing at a number of sample points and record the minimum distance.&lt;/p&gt;

&lt;p&gt;In other words the local space of the mesh is &lt;em&gt;voxelized&lt;/em&gt;, to calculate how many voxels we use to represent the distance field, we set a default &lt;code class=&quot;highlighter-rouge&quot;&gt;DF_MIN_NUM_VOXEL_PER_DIM=8&lt;/code&gt; which means there are at least 8 voxels on the shortest axis of the local bounding box, then we keep a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;resolution&lt;/code&gt; to control the actual amount of voxels, the higher this value, the more voxels created.&lt;/p&gt;

&lt;p&gt;The bunny mesh has some holes hence is not completely closed, so we applied a method to distinguish inside sample points, the basic idea is to keep a counter indicates the number of rays hit on back faces, if the counter exceeds a certain number (proportion), the sample point should be inside of the mesh.&lt;/p&gt;

&lt;p&gt;For readability here put the pseudo-code written in Python, as follows,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# DF bbox should be slightly larger
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateDistanceFieldBBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Calculate Volume grid dimensions according to bbox and resolution
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolumeDimension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalculateVoxelDimension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Generate sample ray direction
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleDirections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenerateSampleRayDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# for each sample location, do brute-force ray tracing
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VolumeDimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XYZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VolumeMaxDistance&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampleDir&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SampleDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# calculate ray(pos, dir)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampleDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ray-mesh intersection
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boolHit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intersect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boolHit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# bac kface counter
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampleDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hitBack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curDistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
	&lt;span class=&quot;c1&quot;&gt;# ! the position is inside if &amp;gt;50% rays hit back face
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hitBack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SampleDirections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# ! for meshes that is not entirely close, 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# ! this is the smooth operation on the border of in-outside. 
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voxelSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitBack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.95&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;OutData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minDistance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;complexity-problem&quot;&gt;complexity problem&lt;/h5&gt;

&lt;p&gt;The generation of distance field works fine when we set &lt;code class=&quot;highlighter-rouge&quot;&gt;resolution = 1.0f&lt;/code&gt;, that is to use 8 voxels on the shortest axis, it applies to the bunny, creating a 10x10x8 grid, and within each grid cell there runs 1200 brute-force ray tracing; as we use the zipped bunny mesh which has 4k triangles, the calculation of distance field takes about half a minute.&lt;/p&gt;

&lt;p&gt;Things get tough when higher resolution of distance field is required, since we are using CPU processors the task is completely in a sequential style, it takes hours to calculate a distance field of 41x40x32 grid cells. To alleviate such problem we promote three possible solution, the (1) first one is to transport the calculation to GPU, which would largely reduce the running time; the (2) second is to enable multi-tasking on CPU, a way that is used by the Unreal Engine 4 for distance field generation; the (3) third is to try another method to calculate the shortest distance, i.e. the point-and-triangle-feature algorithm proposed in “Real-time Collision Detection” by Christer Ericson, we didn’t choose this method because it has limitations when the mesh is not closed, besides it’s less intuitive than ray tracing. The project is still growing and it may introduce the first or second solution later.&lt;/p&gt;

&lt;h4 id=&quot;32-ray-marching-algorithm-and-sdf&quot;&gt;3.2 Ray-marching algorithm and SDF&lt;/h4&gt;

&lt;p&gt;Ray marching algorithm is a variation of ray tracing, and the thing we describe here is also known as “&lt;strong&gt;Sphere tracing&lt;/strong&gt;”. Sphere tracing algorithm should come with an exact or approximate SDF function &lt;code class=&quot;highlighter-rouge&quot;&gt;SDF(position)&lt;/code&gt; which describes the nearest distance value at any place in the space. In ray marching, the transportation of ray is decomposed into discrete steps, this is possible because the property of SDF guarantees that within this distance you won’t hit or miss anything, so that the ray can step as the &lt;a href=&quot;https://www.google.com/search?q=ray+marching&amp;amp;rlz=1C1GCEU_zh-CNCN855CN855&amp;amp;tbm=isch&amp;amp;source=iu&amp;amp;ictx=1&amp;amp;fir=ozxYkxrmCIjowM%253A%252CyLAtmMCY6hXOpM%252C%252Fm%252F0b2r6k&amp;amp;vet=1&amp;amp;usg=AI4_-kTzB3M_mZCSZwcyzO-pQdNtWB6KbQ&amp;amp;sa=X&amp;amp;ved=2ahUKEwj_hLud95XjAhVRFqYKHaGmBFYQ_h0wE3oECAgQBQ#imgrc=ozxYkxrmCIjowM:&amp;amp;vet=1&quot;&gt;figure&lt;/a&gt; (source: Google) below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/spheretrace.jpg&quot; alt=&quot;spheretrace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the idea, the pseudo code of sphere tracing algorithm is rather straightforward:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RaysCameraToPixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;travel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hit_threshold_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_max_step_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# not hit &amp;amp; not overstep
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;travel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# march a step
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# increase step counter
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;currentPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;travel&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# next position
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;# sdf query
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# hit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;shading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;noted that we should set an upper bound for marching step, otherwise when a ray is almost parallel to a surface, the distance may converge very slow thus time consuming.&lt;/p&gt;

&lt;h5 id=&quot;implicit-distance-functions&quot;&gt;&lt;a href=&quot;http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm&quot;&gt;Implicit distance functions&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Implicit distance function is an analytical function that represents the distance to a much regular object in the space, introduced by Íñigo Quílez. The functions help represent a huge class of constructive geometries,  and are at many places used demos of distance functions. In our project we combine the bunny mesh and some basic geometries, rendering them together in a scene, as you may check in Chapter 4.&lt;/p&gt;

&lt;h4 id=&quot;33-distance-field-representation&quot;&gt;3.3 Distance Field Representation&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Code-DF.png&quot; alt=&quot;Code-DF&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;class DistanceFieldData&lt;/code&gt; consists of necessary data that represent the distance field of a mesh. The basic idea during this class design is considering how can we retrieve distance data in an efficient way, hence we restore the bounding box of the distance field and its size of grid. Besides the most important distance values, we also keeps the positions of the center of each grid as landmarks, avoiding the recalculation at render time.&lt;/p&gt;

&lt;p&gt;You might discover that distance fields keep another bounding box apart from the original mesh, and we note that the bounding box of distance field should be bit &lt;strong&gt;larger&lt;/strong&gt;, this is due to the fact that you cannot generate a global distance field of a scene (because of limited RAM) therefore must keep the distance field of meshes locally; when a ray travels in the scene, there should be a transfer step before which the marching uses global SDF while after which uses local SDF, plus that this transfer shouldn’t be exactly on the border of the distance field, so use the &lt;em&gt;mesh&lt;/em&gt; bounding box as the border.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/DF-illust.png&quot; alt=&quot;DF-illust&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;34-soft-shadows-and-ambient-occlusion&quot;&gt;3.4 Soft shadows and Ambient Occlusion&lt;/h4&gt;

&lt;h5 id=&quot;soft-shadows&quot;&gt;Soft shadows&lt;/h5&gt;

&lt;p&gt;Soft shadows we use in this project is also known as the &lt;strong&gt;penumbra&lt;/strong&gt;, these are certain areas of surface which is lighted but also somewhat occluded; Usually, this effect happens when the light source is larger than the object receiving light, while in the project we use a global directional light but inherit the basic idea. The Huygens–Fresnel principle indicates that a wavefront of light can be treated equally as a series of light sources, each of which continue to beam light to latter phases, so when the light path reaches near an opaque object, the light is partially occluded, that’s how we calculate soft shadows here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Light-illust.jpg&quot; alt=&quot;Light-illust&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source code of soft shadow calculation is given below, the parameters are named as their meanings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Code-softshadow.png&quot; alt=&quot;Code-softshadow&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;ambient-occlusion&quot;&gt;Ambient Occlusion&lt;/h5&gt;

&lt;p&gt;Ambient Occlusion is another shadowing effect that add soft shadows to a scene to make it looks good. The general idea is that opaque objects can influence ambient lights casting on other objects, however, to check if objects are close to one another is not that easy, so people have introduced cheaper approximation like Screen Space Ambient Occlusion (SSAO), Screen Space Directional Occlusion (SSDO), etc. They sometimes look fine while in other times create artefacts.&lt;/p&gt;

&lt;p&gt;Distance Field Ambient Occlusion (DFAO) comes with distance field with almost no extra cost, with merely several more steps of SDF texturing it could create plausible realistic effects; the idea is also very intuitive: closer sample (step) points contributes more to the ambient occlusion to a surface, and closer objects create denser occlusion. Codes are shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Code-ao.png&quot; alt=&quot;Code-ao&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-outcomes&quot;&gt;4. Outcomes&lt;/h2&gt;

&lt;h4 id=&quot;41-screenshots&quot;&gt;4.1 Screenshots&lt;/h4&gt;

&lt;p&gt;The completion of this project takes some time, I make a recording screen-shot at each milestone. You may find the screen shots in the local folder &lt;strong&gt;./shots&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After I complete the basic camera settings, the screen and the ray marching renderer, I create a plane and a sphere to test if the camera and the ray marching algorithm works fine.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-06-25 02_14_09.bmp&quot; alt=&quot;2019-06-25 02:14:09&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After finishing the mesh importing and the distance field generation function, I use the generated distance function into the renderer, and it seems that the voxels are correctly detected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-06-28 16_53_33.bmp&quot; alt=&quot;2019-06-28 16:53:33&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Instead of returning the value at the center of the voxel, now the distance function applies tri-linear interpolation, and the soft shadow part is added. Noted that the resolution of SDF is low at present, so the ears of bunny are flawed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-06-28 20_41_48.bmp&quot; alt=&quot;2019-06-28 20:41:48&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It takes some time to generate a more accurate distance field, now the bunny looks better; also at this time, to avoid regenerating the distance field every run, I give names to meshes, and add functions to import and export distance fields with files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-06-29 09_20_22.bmp&quot; alt=&quot;2019-06-29 09_20_22&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Then I referred to the distance functions of geometries, put them together with the bunny.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-06-29 11_10_34.bmp&quot; alt=&quot;2019-06-29 11:10:34&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now it’s time to give them colors, same time I add the ambient occlusion part into shading function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-07-02 10_39_05.bmp&quot; alt=&quot;2019-07-02 10_39_05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To help you identify the AO effect much clearer, I make a comparison here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/Compare-ao.png&quot; alt=&quot;Compare-ao&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;42-running-time&quot;&gt;4.2 Running time&lt;/h4&gt;

&lt;p&gt;When the screen size is set 500x500 pixels, the render fps is about 2 frames/second, it runs slow due to large cost on SDF query, but if you modify the screen settings in &lt;strong&gt;src/parameters.h&lt;/strong&gt;, like using a 200x200 screen, the rendering would reach real-time level.&lt;/p&gt;

&lt;h2 id=&quot;5-discussion&quot;&gt;5. Discussion&lt;/h2&gt;

&lt;p&gt;I have to admit that this project can be further improved, I’ve met some problems but also find some solutions, with motivation I would spend time to complete my ToDo’s and find out more to be done.&lt;/p&gt;

&lt;p&gt;The current implementation is slow on SDF generation, which is the very first task I would work with. It also have some problem with visual effects (sometimes), that the bounding box of the bunny may influence the ambient occlusion calculation, as you may see in the following picture, there’s a light square beneath the bunny, this happens when you adjust the step size of ambient occlusion, and I believe the core of this problem is the discontinuity of the global distance field, at the border of the bunny’s mesh box. I’ll look into this and alleviate the artefect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sdf/2019-06-29 14_36_14.bmp&quot; alt=&quot;2019-06-29 14:36:14&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-declaration&quot;&gt;6. Declaration&lt;/h2&gt;

&lt;p&gt;I hereby declare that the documents and codes of this project are completed by my self, work that doesn’t belong to me are all noted in reference.&lt;/p&gt;

&lt;h2 id=&quot;7-reference&quot;&gt;7. Reference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Sramek, M. . (2006). 3d distance fields: a survey of techniques and applications. IEEE Transactions on Visualization &amp;amp; Computer Graphics, 12(4), 581-599.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm&quot;&gt;Íñigo Quílez: Distance functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/DistanceFieldAmbientOcclusion/index.html&quot;&gt;Unreal Engine 4: Distance Field Ambient Occlusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oAS74MscuLY&amp;amp;list=PL3POsQzaCw53iK_EhOYR39h1J9Lvg-m-g&amp;amp;index=1&quot;&gt;Youtube: A ray marching shader tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learnopengl.com/Model-Loading/Assimp&quot;&gt;LearnOpenGL.com: Assimp and basic mesh loading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="C++" /><category term="Computer Graphics" /><category term="SDF" /><category term="AO" /><summary type="html">[Link to this project] on Github This project works as the outcome of Course DH2323 at KTH, Computer Graphics and Interaction. The project is a C++ implementation of Ray-marched ambient occlusion rendered with Signed Distance Field. This article is basically a copy of the readme text of this project at its repository. 0. Logs Features Common mesh loading with ASSIMP Ray Marching with SDF SDF calculation of various constructive geometries SDF generation for arbitrary mesh (e.g. bunny.ply) Store and Load SDF texture data Scene combined with mesh and constructive geometries Shading, with soft shadows, ambient occlusion To-Do’s Camera: keyboard and mouse control SDF: per-mesh SDF generation in preprocessing SDF: texture caching and storing (compressing?) Landscape: represent global height field, and combine with SDF Shader: shading function, coloring, ambient occlusion File System: mesh name, I/O method, SDF importing (avoid to generate the same SDF each run, time consuming!) Mesh &amp;amp; SDF: mesh instancing, apply mesh transformations to SDF query SDF generation multi-tasking GPU: transport the project to GPU I. Environment / Requirements Platform: Ubuntu 16.04 LTS Processer: Intel Core i7-8700 Compiler: gcc(g++) 5.4.0 (should be fine with any recent versions) Programming language: C++ Tools and Third-party libraries cmake: sudo apt install cmake SDL: sudo apt install libsdl-dev ASSIMP: sudo apt install libassimp-dev libassimp-tuils II. How-to’s How to run? cd //path/to/Project/ Generate the project and run : cmake CMakeList.txt make ./Run In case you cannot generate the project with CMake, check if there exist CMakeCache.txt cache file in the folder, please remove it first: sudo rm CMakeCache.txt How to make full use? If you have the interest to read the codes or make modifications, please feel free and go ahead. And here are some tips before you start. For convenience, I define a file called debug.h in the Project/src/ folder, enclose you can find 4 macros #define DEBUG #define TIMING #define SCREENSHOT #define PREZ these are switches that control the functions of the program. DEBUG: output some useful information of current run in the console. TIMING: output frame render time in the console. SCREENSHOT: save the last frame before close into Project//images/sdf/ as a .bmp file PREZ: render additional geometries in the scene when TRUE, otherwise only render the bunny. Another file called “parameters.h” in the same folder, include all the parameters that use to control the scene, distance field, camera and light. Things are commented, and you could have a try to change some of them then check the outcome. Don’t forget to recompile every time you modify any file, simply enter make in the console.</summary></entry><entry><title type="html">Visualization of Stockholm Royal Seaport</title><link href="http://localhost:4000/SRS-vis/" rel="alternate" type="text/html" title="Visualization of Stockholm Royal Seaport" /><published>2019-03-15T00:00:00+01:00</published><updated>2019-03-15T00:00:00+01:00</updated><id>http://localhost:4000/SRS-vis</id><content type="html" xml:base="http://localhost:4000/SRS-vis/">&lt;p&gt;&lt;img src=&quot;/images/srs/srs.png&quot; alt=&quot;preview&quot; /&gt;
&lt;a href=&quot;https://zephyrl.github.io/infoVis-pro3proto/&quot;&gt;[Link]&lt;/a&gt; to the visualization&lt;/p&gt;

&lt;p&gt;Project Stockholm Royal Seaport is collaboration of Stockholm Stad and our visualization group, the aim of this programme is to provide straightforward visuals for the data of this construction region, including construction status, substainability, transport convenience, etc. The database is provided by Stockhold Stad, and our main challenge is find the right approach to make them explicable and intuitive.&lt;/p&gt;

&lt;p&gt;Our teammate Sabina created a site to better illustrate this project, here is the &lt;a href=&quot;http://sabinavonessen.me/royalseaport/&quot;&gt;link to the site&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;However, you could still get a preview of this project by try it yourself.&lt;/p&gt;

&lt;h3 id=&quot;phases-view&quot;&gt;Phases View&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;Phase&lt;/strong&gt; is defined by Stockholm Stad as a region of construction, usually the whole phase is either completed/under-construction or in-design. By click on the empty space of a phase you could get a summary for that phase, as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/srs/phase.png&quot; alt=&quot;phase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The sunburst diagram enables you to click on any entity and see the detail of it, and by clicking the center of the diagram you could go back to upper hierachy.&lt;/p&gt;

&lt;h3 id=&quot;construction-view&quot;&gt;Construction View&lt;/h3&gt;

&lt;p&gt;You might have already seen that when you are hovering on any house icon, there pops up a window to provide you with at brief introduction of it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/srs/house.png&quot; alt=&quot;house&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and by clicking it you open a new window to see its status and many other data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/srs/house-1.png&quot; alt=&quot;house-data&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filters&quot;&gt;Filters&lt;/h3&gt;

&lt;p&gt;The filters on the left side helps you to make comparisons among all the phases and buildings, it is also one of the important demands of the Stockholm Stad. By clicking diffenct filters you would see the color of icons changing, varying from red to yellow to green, and to be intuitive, ususally a red color means “not good” and a green means “good”. Take transportation as an example, the red houses means there are fewer slot of bicycle slots for that building, and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/srs/filter.png&quot; alt=&quot;filter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The icons are also sorted and placed on the color bar at the bottom-right corner, either by hovering or by clicking you could access the construction of that certain level.&lt;/p&gt;

&lt;p&gt;Have fun with it!&lt;/p&gt;

&lt;p&gt;2019-03-15&lt;/p&gt;</content><author><name></name></author><category term="Javascript" /><category term="Visualization" /><summary type="html">[Link] to the visualization Project Stockholm Royal Seaport is collaboration of Stockholm Stad and our visualization group, the aim of this programme is to provide straightforward visuals for the data of this construction region, including construction status, substainability, transport convenience, etc. The database is provided by Stockhold Stad, and our main challenge is find the right approach to make them explicable and intuitive. Our teammate Sabina created a site to better illustrate this project, here is the link to the site; However, you could still get a preview of this project by try it yourself. Phases View A Phase is defined by Stockholm Stad as a region of construction, usually the whole phase is either completed/under-construction or in-design. By click on the empty space of a phase you could get a summary for that phase, as follows: The sunburst diagram enables you to click on any entity and see the detail of it, and by clicking the center of the diagram you could go back to upper hierachy. Construction View You might have already seen that when you are hovering on any house icon, there pops up a window to provide you with at brief introduction of it: and by clicking it you open a new window to see its status and many other data. Filters The filters on the left side helps you to make comparisons among all the phases and buildings, it is also one of the important demands of the Stockholm Stad. By clicking diffenct filters you would see the color of icons changing, varying from red to yellow to green, and to be intuitive, ususally a red color means “not good” and a green means “good”. Take transportation as an example, the red houses means there are fewer slot of bicycle slots for that building, and vice versa. The icons are also sorted and placed on the color bar at the bottom-right corner, either by hovering or by clicking you could access the construction of that certain level. Have fun with it! 2019-03-15</summary></entry><entry><title type="html">A Weird Compiler and It’s Visualization</title><link href="http://localhost:4000/Weird-o-Compiler/" rel="alternate" type="text/html" title="A Weird Compiler and It's Visualization" /><published>2018-06-30T00:00:00+02:00</published><updated>2018-06-30T00:00:00+02:00</updated><id>http://localhost:4000/Weird-o-Compiler</id><content type="html" xml:base="http://localhost:4000/Weird-o-Compiler/">&lt;p&gt;&lt;img src=&quot;/images/woc/tree.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://celphi-misc.github.io/woc-visualization/&quot;&gt;[Fast Access]&lt;/a&gt; to the visualization.&lt;/p&gt;

&lt;p&gt;Weird-o-Compiler is the outcome of the course Compiler Theory which I took in my third year of bachelor’s education. The work is collaborated with Yehang Yin, a reliable and respectable friend of mine. We also take the Numerical Analysis course together.&lt;/p&gt;

&lt;p&gt;Here’s another &lt;a href=&quot;https://github.com/celphi-misc/weird-o-compiler&quot;&gt;[LINK]&lt;/a&gt; to the source repository.&lt;/p&gt;

&lt;h2 id=&quot;what-woc-supports-and-what-not&quot;&gt;What WoC Supports and what not?&lt;/h2&gt;

&lt;p&gt;WoC is a C-like and Javasricpt-like compiler with weird restrictions&lt;/p&gt;

&lt;p&gt;Supports:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;functions, nested functions&lt;/li&gt;
  &lt;li&gt;all loop kinds of C, break &amp;amp; continue&lt;/li&gt;
  &lt;li&gt;branching (if &amp;amp; else)&lt;/li&gt;
  &lt;li&gt;label and goto&lt;/li&gt;
  &lt;li&gt;variable&lt;/li&gt;
  &lt;li&gt;all logical and numerical operations of C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not supports:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No MACRO&lt;/li&gt;
  &lt;li&gt;No struct &amp;amp; union&lt;/li&gt;
  &lt;li&gt;No pointers&lt;/li&gt;
  &lt;li&gt;No dynamic strong types (but have built-in types)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-function-of-woc&quot;&gt;What is the function of WoC?&lt;/h2&gt;

&lt;p&gt;You could imagine WoC as something like GCC (ROFL), it can&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Compile codes writen in WoC syntax, to intermediate representation / Assembly&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Help you locate errors in your WoC program&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a visualization of IR tree for your code&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-work-with-it&quot;&gt;How to work with it?&lt;/h2&gt;

&lt;p&gt;To test and use this project, you should&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build the project on your platform (Linux 64-bit suggested),&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a piece of code as if you are programming in C, but be careful with the rules&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the following command to &lt;strong&gt;Compile with WoC&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;woc [file] [options]
Options:
        -a      Generating AST in JSON
        -i      Generating IR tree in JSON
        -s      Generating symbol table for scopes in JSON
        -c      Generating assemble code, in WOCASM 
        -d      Debug mode, programmer should define usage in parse.y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-did-we-use-to-create-woc&quot;&gt;What did we use to create WoC?&lt;/h2&gt;

&lt;p&gt;The tools are introduced and learnt via the labs of this course, basically, &lt;strong&gt;Bison and YAML&lt;/strong&gt;. We design our tokens, and rules to interpret statements, then make use of these tools to complete the first several steps to build a compiler. As for the construction of IR tree, the re-coding to assembly, and the visualization of the tree, these are totally carried out on our own.&lt;/p&gt;

&lt;h2 id=&quot;two-successful-and-one-unsuccessful-example&quot;&gt;Two successful and one unsuccessful example&lt;/h2&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example #1&lt;/h3&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;para1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;para2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You could simply compile this piece of code with WoC, and check the outcomes either with our &lt;a href=&quot;https://celphi-misc.github.io/woc-visualization/&quot;&gt;visualization tool&lt;/a&gt;, or look into the output called xxx.wocasm. This example shows you that WoC shares basic syntax with C.&lt;/p&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example #2&lt;/h3&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nested functions, C no longer supports this feature, while you could still do this in WoC, as you declare a member function for a class, noted that the function can only be used within that scope.&lt;/p&gt;

&lt;h3 id=&quot;error&quot;&gt;Error&lt;/h3&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Semicolon &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;// missed&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Mismatched else statement&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;para1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;para2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Non-left-value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Yet another semicolon missed&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is similar to example 1, while it contains some mindless mistakes, WoC would help you locate them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/woc/error.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;visualization-tool&quot;&gt;Visualization Tool&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://celphi-misc.github.io/woc-visualization/&quot;&gt;Visualization Tool&lt;/a&gt;, introduced by Yehang, could display a tree structure, which is represented by a JSON file. So it actually not only works for our program, you could even use it to visualize tree structured somewhere else.&lt;/p&gt;

&lt;p&gt;Where should the JSON file come from? Our WoC prepares this function to you, see in the options, with “-i” you would easily get it. And by clicking the red archieve button on the bottom-left corner, you could select which JSON file to load in.&lt;/p&gt;

&lt;h3 id=&quot;side-notes&quot;&gt;Side Notes&lt;/h3&gt;

&lt;p&gt;You might wonder where the name of this project comes from, actually, we just thought the syntax we designed is kind of weird, so we would like to name it Weird Compiler, however then we realize the abbreviation of it is not supposed to be WC anyway, so we add an emoji like “&lt;strong&gt;-o-&lt;/strong&gt;” between the words, which at the same time represents our emotions developing such a compiler, yarning in the midnights – it seems not a easy task to do with anyway. Then Eventually, the compiler is call WoC.&lt;/p&gt;

&lt;p&gt;2018-06-30&lt;/p&gt;</content><author><name></name></author><category term="C" /><category term="Compiler" /><summary type="html">[Fast Access] to the visualization. Weird-o-Compiler is the outcome of the course Compiler Theory which I took in my third year of bachelor’s education. The work is collaborated with Yehang Yin, a reliable and respectable friend of mine. We also take the Numerical Analysis course together. Here’s another [LINK] to the source repository. What WoC Supports and what not? WoC is a C-like and Javasricpt-like compiler with weird restrictions Supports: functions, nested functions all loop kinds of C, break &amp;amp; continue branching (if &amp;amp; else) label and goto variable all logical and numerical operations of C Not supports: No MACRO No struct &amp;amp; union No pointers No dynamic strong types (but have built-in types) What is the function of WoC? You could imagine WoC as something like GCC (ROFL), it can Compile codes writen in WoC syntax, to intermediate representation / Assembly Help you locate errors in your WoC program Create a visualization of IR tree for your code How to work with it? To test and use this project, you should Build the project on your platform (Linux 64-bit suggested), Write a piece of code as if you are programming in C, but be careful with the rules Run the following command to Compile with WoC woc [file] [options] Options: -a Generating AST in JSON -i Generating IR tree in JSON -s Generating symbol table for scopes in JSON -c Generating assemble code, in WOCASM -d Debug mode, programmer should define usage in parse.y What did we use to create WoC? The tools are introduced and learnt via the labs of this course, basically, Bison and YAML. We design our tokens, and rules to interpret statements, then make use of these tools to complete the first several steps to build a compiler. As for the construction of IR tree, the re-coding to assembly, and the visualization of the tree, these are totally carried out on our own. Two successful and one unsuccessful example Example #1 var __var = 3; var val = __var; function foo() { var bar = val &amp;lt;&amp;lt; 2; __var += val * bar &amp;gt; 0 ? __var : val &amp;gt;&amp;gt; __var; return bar + __var; } function main(argc, argv) { var a = &quot;hello world&quot;; function hello(para1, para2) { return null; } if(a == &quot;hello&quot;) { for(var i = 0; i &amp;lt; 10; i++) { print(a); } } else if(a[0] == 'h') { print(a); } else { print(&quot;foo&quot;); } return 0; } You could simply compile this piece of code with WoC, and check the outcomes either with our visualization tool, or look into the output called xxx.wocasm. This example shows you that WoC shares basic syntax with C. Example #2 function main(argc, argv) { function max(a, b) { return a &amp;gt; b ? a : b; } return max(1, max(2, 3)); } Nested functions, C no longer supports this feature, while you could still do this in WoC, as you declare a member function for a class, noted that the function can only be used within that scope. Error var __var = 3; var val = __var; function foo() { var bar = val &amp;lt;&amp;lt; 2; __var += val * bar &amp;gt; 0 ? __var : val &amp;gt;&amp;gt; __var // Semicolon return bar + __var; // missed } function main(argc, argv) { var a = &quot;hello world&quot;; else print(4); // Mismatched else statement function hello(para1, para2) { return null; } if(a == &quot;hello&quot;) { for(var i = 0; i &amp;lt; 10; i++) { print(1 + 1 = 3); // Non-left-value } } else if(a[0] == 'h') { print(a); } else { print(&quot;foo&quot;) // Yet another semicolon missed } return 0; } This is similar to example 1, while it contains some mindless mistakes, WoC would help you locate them: Visualization Tool The Visualization Tool, introduced by Yehang, could display a tree structure, which is represented by a JSON file. So it actually not only works for our program, you could even use it to visualize tree structured somewhere else. Where should the JSON file come from? Our WoC prepares this function to you, see in the options, with “-i” you would easily get it. And by clicking the red archieve button on the bottom-left corner, you could select which JSON file to load in. Side Notes You might wonder where the name of this project comes from, actually, we just thought the syntax we designed is kind of weird, so we would like to name it Weird Compiler, however then we realize the abbreviation of it is not supposed to be WC anyway, so we add an emoji like “-o-” between the words, which at the same time represents our emotions developing such a compiler, yarning in the midnights – it seems not a easy task to do with anyway. Then Eventually, the compiler is call WoC. 2018-06-30</summary></entry><entry><title type="html">ISORunner - A Try of Unity</title><link href="http://localhost:4000/First-Try-On-Unity-ISORunner/" rel="alternate" type="text/html" title="ISORunner - A Try of Unity" /><published>2017-12-17T00:00:00+01:00</published><updated>2017-12-17T00:00:00+01:00</updated><id>http://localhost:4000/First-Try-On-Unity-ISORunner</id><content type="html" xml:base="http://localhost:4000/First-Try-On-Unity-ISORunner/">&lt;p&gt;&lt;img src=&quot;/images/isorunner/start.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1WspZE7MGQffC2-u6AbFyx2m7B0xhYcXw&quot;&gt;[LINK]&lt;/a&gt; to the game installer on Android.&lt;/p&gt;

&lt;p&gt;This project is a Unity-based game application which was finally deployed on Android smartphones, it is also my first try of using Unity.&lt;/p&gt;

&lt;p&gt;I’m also glad to introduce that the project is completed by me and my kind teammates, Linghao CHEN and Yuxin LIAO, who always accompanied me through my bachelor’s education.&lt;/p&gt;

&lt;p&gt;The game is called &lt;strong&gt;ISORunner&lt;/strong&gt;, name given by Linghao; he explains that “ISO” is a diminutive used in basketball denoting a 1v1 or 1 vs N game, so we just call this one ISO-Runner, as it is a single-player, and the mode of games matches exactly to the definition of ISO.&lt;/p&gt;

&lt;p&gt;ISORunner includes two game modes, one is a running game, in which you should control the boy to run though all the obstacles. The other modes is like the Game of Bombs, that you should drop bombs on tiles, and eliminate waves of enemies.&lt;/p&gt;

&lt;p&gt;If you are reading this and don’t want to be bored by the upcoming long description of our project work, I would suggest you to directly try the game instead, &lt;a href=&quot;https://drive.google.com/open?id=1WspZE7MGQffC2-u6AbFyx2m7B0xhYcXw&quot;&gt;using the link to the installer of game on Android.&lt;/a&gt; To successfully run the game, we suggest you to have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android smartphone with &lt;strong&gt;Minimum Version Android4.4&lt;/strong&gt; supported.&lt;/li&gt;
  &lt;li&gt;At lease &lt;strong&gt;1GB&lt;/strong&gt; RAM&lt;/li&gt;
  &lt;li&gt;Screen aspect ratio &lt;strong&gt;16:9&lt;/strong&gt; for best gameplay experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Noted that we no longer maintain or update this game, since we completed this project long time ago and now we are graduated. If you would like to report a bug or see the source of this game, please feel free to &lt;a href=&quot;mailto:zhy@kth.se&quot;&gt;contact me&lt;/a&gt;, and I’ll reply as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;previews-of-the-game&quot;&gt;Previews of the game&lt;/h2&gt;

&lt;h3 id=&quot;game-mode-running-game&quot;&gt;Game Mode: Running Game&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/isorunner/preview-1.png&quot; alt=&quot;img&quot; /&gt;
To make the game more fun to play, we introduced various obstacles and bonus elements, the player is not only controlled by moving and jumping, but also have to surmount different obstructions by doing specific operations. You might see that sometimes you have to wait for a while to get over the roadblock,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isorunner/preview-4.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And sometimes the road is invisible, and don’t worry, we provide you with a functions to through stones to check a solid path, if the stone hits the ground you could hear a sound (which is recorded in reality where a stone drops), then by steping on the right tile you could see the update in the minimap on the top-right corner, which means you gradually find your way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isorunner/preview-3.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also create chances for you to collect bonus and improve your score. By collecting coins like a Super Mario you would hit higher place on the Rankings board, in case you would like to challenge your friend and see who could achieve a higher score.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isorunner/preview-2.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there is actually a place where you could check your previous scores, both available in running mode and the battle mode.
&lt;img src=&quot;/images/isorunner/preview-5.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;game-mode-bombs-game&quot;&gt;Game mode: Bombs Game&lt;/h3&gt;

&lt;p&gt;In battle mode you play mainly with bombs, draw damage to enemies and see how many waves of enemies you could finally defeat. At the beginning you could drop one bomb at a time, but no worries, you would have ways to level yourself up – by runes! There are totally five kind of runes which would periodically exist at a random position in the map, go collect it, and you would be empowered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isorunner/preview-7.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By collecting the runes, you could become faster, stronger(knock enemies out of map), or remove the limitation of number of bombs in a short time, whatever, you would get to know the benefits any rune could give you when you take it. Also, you might get tired of the small bombs sometime, so we give you a chance to use a huge powerful bomb everytime you get another kilo scores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/isorunner/preview-6.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are actuall more content that we could cover here to should you how the game runs, while we still insist you to have a try if possible.&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;All that introduced above pertains to the our gameplay designing task, while it is just one of the many task that we have experienced from developing a game. Besides gameplay, we get to know about &lt;strong&gt;art design, scene management, game logic, soundtrack handling, database management&lt;/strong&gt; and a lot more.&lt;/p&gt;

&lt;p&gt;As you see that, many of the textures used in the game are made by ourselves, moreover, the switching among menu and scenes, the animation state machine that handles the static-running-jumping state of a character, and the read and load of a permenant database which stores the scores – We would say that we learn much from these, and the experience really helps me spot some blind point which I didn’t realize for developing a game.&lt;/p&gt;

&lt;p&gt;2017-12-17&lt;/p&gt;</content><author><name></name></author><category term="Unity" /><category term="Android" /><category term="Game" /><summary type="html">[LINK] to the game installer on Android. This project is a Unity-based game application which was finally deployed on Android smartphones, it is also my first try of using Unity. I’m also glad to introduce that the project is completed by me and my kind teammates, Linghao CHEN and Yuxin LIAO, who always accompanied me through my bachelor’s education. The game is called ISORunner, name given by Linghao; he explains that “ISO” is a diminutive used in basketball denoting a 1v1 or 1 vs N game, so we just call this one ISO-Runner, as it is a single-player, and the mode of games matches exactly to the definition of ISO. ISORunner includes two game modes, one is a running game, in which you should control the boy to run though all the obstacles. The other modes is like the Game of Bombs, that you should drop bombs on tiles, and eliminate waves of enemies. If you are reading this and don’t want to be bored by the upcoming long description of our project work, I would suggest you to directly try the game instead, using the link to the installer of game on Android. To successfully run the game, we suggest you to have: Android smartphone with Minimum Version Android4.4 supported. At lease 1GB RAM Screen aspect ratio 16:9 for best gameplay experience. Noted that we no longer maintain or update this game, since we completed this project long time ago and now we are graduated. If you would like to report a bug or see the source of this game, please feel free to contact me, and I’ll reply as soon as possible. Previews of the game Game Mode: Running Game To make the game more fun to play, we introduced various obstacles and bonus elements, the player is not only controlled by moving and jumping, but also have to surmount different obstructions by doing specific operations. You might see that sometimes you have to wait for a while to get over the roadblock, And sometimes the road is invisible, and don’t worry, we provide you with a functions to through stones to check a solid path, if the stone hits the ground you could hear a sound (which is recorded in reality where a stone drops), then by steping on the right tile you could see the update in the minimap on the top-right corner, which means you gradually find your way. We also create chances for you to collect bonus and improve your score. By collecting coins like a Super Mario you would hit higher place on the Rankings board, in case you would like to challenge your friend and see who could achieve a higher score. And there is actually a place where you could check your previous scores, both available in running mode and the battle mode. Game mode: Bombs Game In battle mode you play mainly with bombs, draw damage to enemies and see how many waves of enemies you could finally defeat. At the beginning you could drop one bomb at a time, but no worries, you would have ways to level yourself up – by runes! There are totally five kind of runes which would periodically exist at a random position in the map, go collect it, and you would be empowered. By collecting the runes, you could become faster, stronger(knock enemies out of map), or remove the limitation of number of bombs in a short time, whatever, you would get to know the benefits any rune could give you when you take it. Also, you might get tired of the small bombs sometime, so we give you a chance to use a huge powerful bomb everytime you get another kilo scores. There are actuall more content that we could cover here to should you how the game runs, while we still insist you to have a try if possible. Challenges All that introduced above pertains to the our gameplay designing task, while it is just one of the many task that we have experienced from developing a game. Besides gameplay, we get to know about art design, scene management, game logic, soundtrack handling, database management and a lot more. As you see that, many of the textures used in the game are made by ourselves, moreover, the switching among menu and scenes, the animation state machine that handles the static-running-jumping state of a character, and the read and load of a permenant database which stores the scores – We would say that we learn much from these, and the experience really helps me spot some blind point which I didn’t realize for developing a game. 2017-12-17</summary></entry><entry><title type="html">More projects are going to be posted…</title><link href="http://localhost:4000/Baseline/" rel="alternate" type="text/html" title="More projects are going to be posted..." /><published>2017-12-15T00:00:00+01:00</published><updated>2017-12-15T00:00:00+01:00</updated><id>http://localhost:4000/Baseline</id><content type="html" xml:base="http://localhost:4000/Baseline/">&lt;p&gt;Please Wait and See!&lt;/p&gt;</content><author><name></name></author><summary type="html">Please Wait and See!</summary></entry></feed>